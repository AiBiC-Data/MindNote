**
'mindnote' 라는 이름의 django 프로젝트를 생성해 주세요.
여러분의 하루를 담을 'diary' 라는 이름의 앱을 생성해 주세요.
일기장의 시간을 여러분의 시간과 맞춰주세요. (시간대 설정, 'Asia/Seoul')
diary앱을 프로젝트 설정에 추가 해주세요.
Django의 기본 데이터 구조를 데이터베이스에 반영해 주세요.
-> python manage.py migrate
프로젝트를 실행하고 정상적으로 실행이 되는지 확인해 주세요.

**
mindnote 앱 디렉토리 아래의 urls.py에 ''(빈 문자열) 패턴과 일치하면 diary 앱의 urls를 보도록 작성해 주세요.
아래를 참고해서 diary앱 디렉토리 아래에 urls.py를 새로 만들고 URL 구조를 작성해 주세요.

diary/ 로 들어오면 일기 목록을 보여주는 'page_list'뷰로 이동합니다.
diary/info/ 로 들어오면 감정 일기에 대한 설명을 보여주는 'info'뷰로 이동합니다.
diary/write/ 로 들어오면 새로운 일기를 작성하는 'page_create'뷰로 이동합니다.
diary/page/정수형/ 으로 들어오면 각각의 일기 내용을 보여주는 'page_detail'뷰로 이동합니다. 이때 해당 정수는 'page_id'로 뷰에 전달합니다.
diary/page/정수형/edit/ 으로 들어오면 각각의 일기를 수정하는 'page_update'뷰로 이동합니다. 이때 해당 정수는 'page_id'로 뷰에 전달합니다.
diary/page/정수형/delete/로 들어오면 각각의 일기를 삭제하는 'page_delete'뷰로 이동합니다. 이때 해당 정수는 'page_id'로 뷰에 전달합니다.
아직 각각의 View를 작성하지 않은 상태이므로 모든 URL을 주석 처리해 주세요.
개발 서버를 켜고 에러 없이 동작하는지 확인해 주세요.

**
감정 일기 모델(Model) 작성하기
아래를 참고해서 models.py에 모델(Model)을 작성해 주세요.

models.py에 'Page' 모델 클래스를 정의해주세요.
Page 클래스에는 아래와 같은 필드가 필요합니다.
제목(title), 문자열, 길이 제한 100자
내용(content), 문자열, 길이 제한 없음
감정 상태(feeling), 문자열, 길이 제한 80자
감정 점수(score), 정수형
작성일(dt_created), 날짜
Page 모델을 문자열로 표시할 때 사용되는 str 메소드를 정의해 주세요
admin.py에 방금 작성한 Page 모델을 등록해 주세요.
데이터베이스에 변경 사항을 반영해 주세요.
-> python manage.py makemigrations
-> python manage.py migrate


**
일기 모아보기
아래를 참고해서 일기 모아보기 페이지를 완성해 주세요.
관리자 계정(Superuser)를 생성하고 Django 관리자 도구를 이용해 Page 데이터를 자유롭게 작성해 주세요.
-> python manage.py createsuperuser
diary 앱 아래에 알맞은 디렉토리 구조를 만들고, 아래와 같은 page_list.html 파일을 생성해주세요.
<!-- page_list.html -->
<h2>일기 목록 페이지</h2>
urls.py에서 'diary/' URL 패턴을 주석 해제하고, 이를 참고해서 views.py에 page_list 뷰를 정의해 주세요. page_list 뷰는 요청을 받으면 2번에서 만들었던 page_list.html 템플릿을 렌더링 해서 돌려주는 뷰입니다.
서버를 실행하고 diary/ 로 이동해서 아래처럼 잘 나오는지 확인합니다.
이제 모든 데이터를 가져와서 보여주도록 작성해봅시다. 데이터베이스로부터 모든 Page 데이터를 가져와서 'object_list'라는 키워드로 page_list 템플릿에 전달하도록 page_list뷰를 변경해 주세요.
아래를 참고해서 모든 Page 데이터를 출력하도록 page_list.html을 작성해 주세요. 반복 되는 부분을 작성하는 것이 핵심입니다.

<!-- page_list.html -->
<h2>일기 목록 페이지</h2>

<ul>
        <!-- 하나의 글은 여기서부터 -->
    <li>
        <div class="date">
            <span><!--날짜 중 '일'--></span>
                        <p><!--날짜 중 '월'--></p>
        </div>
        <h2><!--제목--></h2>
        <div class="score">
            <p>감정점수</p>
            <span><!--감정점수-->점</span>
        </div>
    </li>
        <!-- 여기까지 반복됩니다. -->
</ul>
개발 서버를 켜고 '/diary/'로 들어가서 일기 내용들이 나오는지 확인해 주세요.

**
감정 일기 상세페이지
이번에는 각각의 감정 일기를 클릭 했을 때 보이는 상세 페이지를 구현해 보도록 하겠습니다. 아래를 참고해서 페이지를 작성해 주세요.
urls.py에서 상세 페이지에 해당하는 URL 패턴을 주석 해제해 주세요.
page_detail 뷰를 작성해 주세요.
뷰 이름은 'page_detail'로 합니다.
objects.get()을 이용해서 하나의 Page 데이터를 조회해 주세요.
page_detatil 뷰는 'page_detail.html' 템플릿을 랜더링해서 결과로 돌려줍니다.
조회한 Page 데이터를 'object'라는 키워드로 page_detail 템플릿에 전달합니다.
아래를 복사하여 page_detail.html을 작성해 주세요.
<!-- page_detail.html -->
<div class="notetext">
    <div class="text-box">
        <h2><!-- 제목--></h2>
        <div class="state">
            <p>감정 상태</p>
            <span><!-- 감정 상태 --></span>
        </div>
        <div class="score">
            <p>감정 점수</p>
            <span><!-- 감정 점수 -->점</span>
        </div> 
        <div class="date">
            <span><!-- 작성 날짜 중 '일(day)'--></span>
            <div class="month-year">
                <p class="month"><!-- 작성 날짜 중 '월(Month)'--></p>
                <p class="year"><!-- 작성 날짜 중 '년(year)'--></p>
            </div>
        </div>
        <div class="detail"><!-- 일기 내용 --></div>
        <div class="notetext-btn">
            <ul>
                <li><a href="#">삭제하기</a></li>
                <li><a href="#">수정하기</a></li>
            </ul>
        </div>
    </div>
</div>
일기 내용은 줄 바꿈이 정상적으로 적용 되도록 템플릿 필터 'linebreaksbr'을 적용해주세요.
아래를 참고하여 page_list 템플릿에 각각의 Page를 눌렀을 때 상세 글로 이동하도록 작성해 주세요.
<h2>일기 목록 페이지</h2>
<ul>
    {% for obj in object_list %}
    <li>
                <a href="상세 글로 이동할 URL"> <!-- 클릭 시 이동하기 위한 a 태그 -->
            <div class="date">
                <span>{{obj.dt_created|date:"d"}}</span>
                <p>{{obj.dt_created|date:"M"}}</p>
            </div>
            <h2>{{obj.title}}</h2>
            <div class="score">
                <p>감정점수</p>
                <span>{{obj.score}}점</span>
            </div>
                </a>
    </li>
    {% endfor %}
</ul>
개발 서버를 켜고 /diary/로 이동한 후 각각의 일기 글을 눌러서 상세 보기로 잘 이동하는지 확인합니다.

**
감정 일기 URL 연결하기
지금 page_list 템플릿을 보면 템플릿에 URL이 문자열 형태로 하드코딩 되어있습니다. 이렇게 되면 추후 URL이 변경되었을 때 각 URL이 들어있는 모든 부분을 일일히 찾아서 변경해 주어야 합니다. 모든 소스 코드를 보지 않고도 URL을 관리할 수 있도록 url-name과 url 템플릿 태그를 사용해서 개선해 주세요.
아래를 참고해서 urls.py의 모든 url 패턴에 name을 작성해 주세요. 주석 처리되어 있는 url은 name을 작성 후 다시 주석으로 변경해 주세요.
일기 목록 페이지 -> 'page-list'
감정 일기 소개 페이지 -> 'info'
새 일기 작성 페이지 -> 'page-create'
상세 일기 보기 페이지-> 'page-detail'
일기 수정 페이지 -> 'page-update'
일기 삭제 페이지 -> 'page-delete'
page_list 템플릿에 하드코딩 된 url을 url 템플릿 태그와 작성한 url-name을 이용해서 수정해 주세요.

**
감정 일기의 디자인 구조
이번에는 감정 일기에 디자인을 입혀 보도록 하겠습니다. 아래를 참고해서 각 파일을 열고 템플릿을 작성해 주세요.
모든 템플릿의 부모 템플릿이 되는 base 템플릿을 열고 작성해 주세요.
page_list 템플릿을 열어 보면 style을 적용하기 위해서 구조가 조금 바뀌었습니다, 이 page_list 템플릿에 base 템플릿을 상속 받은 후, 템플릿에 표시된 부분을 content 블럭으로 적용해서 구현해 주세요.
page_detail 템플릿을 열고 base 템플릿을 상속 받은 후, 마찬가지로 템플릿에 표시된 부분을 content 블럭으로 구현해 주세요.
아래를 참고해서 감정 일기 소개 페이지를 만들어 주세요.
info 템플릿(info.html)을 열고 base 템플릿을 상속 받은 후, 표시된 부분을 content 블럭으로 구현해 주세요.
urls.py에서 info에 대한 url을 주석 해제해 주세요.
views.py에 info 템플릿을 랜더해서 결과로 돌려주는 info view를 작성해주세요.
개발 서버를 켜고 일기 목록 보기, 상세 보기, 감정 일기 소개 페이지가 모두 잘 나오는지 확인해 주세요.

**
일기장 페이지 만들기
이번에는 일기를 입력할 수 있는 폼을 만들어 보겠습니다. 아래를 참고해서 작성해 주세요.
models.py를 보면 우리가 작성해야 하는 필드는 총 5개 입니다.
title = models.CharField(max_length=100)
content = models.TextField()
feeling = models.CharField(max_length=80)
score = models.IntegerField()
dt_created = models.DateField()
diary 디렉토리에 forms.py를 생성하고 아래를 참고해서 PageForm을 작성해 주세요.
from django import forms
class PageForm(forms.Form):
    ...
# 폼 필드 목록
# 아래를 참고해서 작성해 주세요.
title -> CharField, 최대 길이 100자, label='제목'
content -> CharField, widget=forms.Textarea, label='내용'
feeling -> CharField, 최대 길이 80자, label='감정 상태'
score -> IntegerField, label='감정 점수'
dt_created -> DateField, label='날짜'

urls.py로 가서 일기 작성에 해당하는 URL 패턴의 주석을 해제해 주세요.
views.py에 아래를 참고하여 page_create 뷰를 작성해 주세요.
from .forms import PageForm # 사용할 form을 가져와야 합니다.
form = PageForm() # 작성한 폼을 이용해서 form을 생성합니다.
page_create 뷰는 page_form.html을 랜더 해서 결과로 돌려주는데, 이때 'form'이라는 키워드로 생성한 PageForm을 context로 넘겨주도록 작성해 주세요.
page_form.html로 가서 p 태그 형식으로 form을 랜더 하도록 작성해 주세요.
base.html로 가서 일기 쓰기로 이동하는 링크에 page-create를 연결해 주세요.
개발 서버를 켜고 /diary/로 이동한 후 '일기 쓰기'를 눌러서 아래와 같이 폼이 나오는지 확인합니다. 지금은 아무런 동작을 하지 않아요 ! 입력할 수 있는 폼이 잘 나온다면 ok !

**
감정 노트 작성 페이지 만들기
아래를 참고해서 실제로 동작하는 일기 작성 페이지를 만들어 주세요.
page_form 템플릿에 CSRF를 방지 할 수 있도록 코드를 작성해 주세요.
아래를 참고해서 page_create 뷰를 작성해 주세요.
POST
아래는 요청이 post 방식으로 들어왔을 때의 로직입니다.
def page_create(request):
        # 만약 POST 방식으로 요청이 들어오면
            # 작성한 데이터를 가져와서 새로운 Page 데이터 모델을 만들고
            # 데이터를 저장한 후
            # 방금 작성한 상세 일기 보기 페이지로 이동합니다.
그럼 하나씩 구현해봅시다. 먼저 request로 부터 사용자가 입력한 데이터를 가져와서 새로운 Page 데이터 model을 생성하고 데이터 베이스에 저장합니다.
# 데이터 가져오기 
new_page = Page(
    title = request로 부터 가져온 데이터
    ...
)
# 데이터 저장
그 다음 모든 로직이 완료 되었으므로 방금 저장한 데이터를 보여주는 page-detail 로 redirect 합니다. 이때 page의 id값이 필요하겠죠?
from django.shortcuts import redirect # redirect를 먼저 import 해야합니다.
...
return redirect(...)
GET
요청이 post 방식이 아닐 때는 기존의 코드대로 새로운 form을 생성하고 page_form 템플릿을 랜더해서 결과로 돌려주도록 작성해 주세요.
def page_create(request):
    # 만약 POST 방식으로 요청이 들어오면
        # POST 로직 ...
    # GET 방식 이라면
        # PageForm을 이용해서 새로운 form을 생성하고
        # 생성한 form을 전달받은 page_form 템플릿을 랜더해서 결과로 돌려줍니다.
개발 서버를 켜고 일기 작성 페이지로 이동한 뒤 새로운 일기를 자유롭게 작성해 주세요.
'작성하기'를 눌러서 새로 쓴 글로 이동하는지 확인해 주세요.

**
더 간단한 작성 페이지
아래를 참고해서 모델 폼(Model Form)을 사용해 감정 일기 작성 페이지를 구현해 주세요.
forms.py에 작성되어 있는 PageForm을 모두 지우고 forms.ModelForm을 상속 받아 PageForm을 작성해 주세요.
Page 모델을 import 하고 아래를 참고해서 PageForm을 작성해 주세요.
# PageForm 안쪽에 들어갈 class
class Meta:
    model = <사용 할 모델>
    fields = ['사용 할 필드']
views.py로 이동해서 아래를 참고해 page_create 뷰를 수정해 주세요.
def page_create(request):
    if request.method == 'POST':
        # 이곳을 수정합니다.
        return redirect ...
먼저 request로부터 데이터를 가져와서 PageForm과 바인딩 해주세요.
form = 바인딩 폼
form을 이용해 데이터를 저장하고, 저장한 데이터를 new_page라는 변수로 받습니다.
new_page = form을 이용한 저장 로직
개발 서버를 켜고 일기 작성 페이지로 들어가 새 글을 작성한 뒤 정상적으로 상세 일기 보기 페이지로 이동하는지 확인해 주세요.

**
오늘 하루는 유효했나요?
감정 일기에 다음과 같은 유효성 검사를 추가하려고 합니다. diary 앱 디렉토리 안의 validators.py에 유효성 검사기(validator)를 작성해 주세요
1. '제목'과 '내용'에는 '#'이 들어갈 수 없습니다.
2. '감정 상태' 에는 숫자가 들어갈 수 없습니다.
3. '감정 점수'는 0부터 10사이의 숫자만 들어갈 수 있습니다.
유효성 검사 함수는 유효성 검사에 실패했을 경우 ValidationError를 발생 시켜야 합니다.
from django.core.exceptions import ValidationError

ValidationError는 첫번째 파라미터로 에러 메세지를 받습니다.
ValidationError('error message')

먼저 '#'이 들어있는 지를 검증하는 validate_no_hash 함수를 작성해 주세요.
def validate_no_hash(value):
    ...
    raise ValidationError(...)
다음으로는 숫자가 들어있는 지를 검증하는 validate_no_numbers 함수를 작성해 주세요.
.isdigit() 함수는 문자가 숫자 값인지 아닌지를 판단해서
그 결과를 True, False로 돌려주는 함수입니다.
for ch in value: # 입력된 문자열을 하나씩 반복하면서
    # 숫자가 있는지를 체크하면 되겠죠?
마지막으로 입력된 값이 0부터 10사이의 숫자 인지를 검증하는 validate_score 함수를 작성해 주세요.
모델 폼을 사용하고 있으므로 models.py로 가서 아래를 참고하여 각 필드 별 알맞은 유효성을 추가해 주세요.
1. '제목'과 '내용'에는 '#'이 들어갈 수 없습니다.
2. '감정 상태' 에는 '#'과 숫자가 들어갈 수 없습니다.
3. '감정 점수'는 0부터 10사이의 숫자만 들어갈 수 있습니다.
example_field = models.CharField(validators=[validator ...])
views.py로 가서 아래를 참고하여 데이터가 유효할 때만 저장 로직을 수행하도록 수정해 주세요.
# 데이터와 폼이 합쳐진 바운드폼으로 데이터가 유효한지 여부를 체크할 수 있습니다.
form.is_valid()
데이터가 유효하지 않을 경우에는 입력된 폼 데이터를 다시 page_form 템플릿으로 전달하여 비어 있지 않은 상태에서 데이터를 수정할 수 있도록 작성해 주세요.
개발 서버를 켜고 각각의 유효성 검증이 잘 동작 하는지 체크해 주세요.

**
일기장이 예뻐야 일기도 써지는 법
지금의 일기 작성 페이지는 일기를 작성할 의욕마저 잃게 해요. 아래를 참고해서 일기 작성 페이지에 이쁜 디자인을 입혀 주세요.
page_form 템플릿으로 가서 작성해 주세요.
데이터를 한 번 입력해 보면 Django가 지원하는 기본 폼 형식으로 렌더링 한 것이 아닌 각각의 폼 요소들을 직접 구현해 주었기 때문에 유효성 에러 메세지가 나오지 않습니다. 우리는 아직 유효성 검사 메세지를 보이도록 작성하지 않았거든요. page_form 템플릿을 수정해 주세요.

**
감정도 수정할 수 있을까요
지금은 상세 일기 보기 페이지에서 '수정하기'를 눌러도 아무런 반응이 없습니다. 아래를 참고해서 상세 일기 보기 페이지의 '수정하기'를 구현해 주세요.
urls.py로 가서 수정하기에 해당하는 url 패턴을 주석 해제해 주세요.
page_detail 템플릿으로 가서 수정하기 페이지로 가는 링크를 url 템플릿 태그를 이용해서 작성해 주세요.
views.py로 가서 page_update 뷰를 작성해 주세요.
 page_update 뷰는 먼저 수정할 데이터를 데이터 베이스에서 조회합니다.
def page_update(...):
    object = <수정 할 Page 데이터를 조회>
POST
요청이 POST 방식인 경우는 사용자가 데이터를 수정하고 전송을 눌렀을 때입니다.
def page_update(...):
    object = <수정 할 Page 데이터를 조회>
    if <request가 POST 방식이라면>:
        form = PageForm(<request에 저장되어 있는 데이터>, instance=<조회한 데이터>)
        if <유효한 데이터라면>:
            <데이터를 저장하고>
            return <일기 상세 보기 페이지로 redirect>
요청이 POST 방식이라면 현재 request에 저장되어 있는 데이터와 데이터 베이스에서 조회한 Page 데이터 모델을 이용해서 PageForm을 만들어 주세요. PageForm의 instance 파라미터를 이용합니다.
 그리고 작성한 form을 이용해서 유효성 검증을 한 후 유효한 데이터라면 데이터 베이스에 저장한 다음
 데이터를 저장한 뒤 수정 된 데이터를 볼 수 있는 일기 상세 보기 페이지로 redirect 하도록 작성해 주세요.
GET
요청이 GET 방식인 경우는 처음 수정 페이지에 들어왔을 때이므로 기존의 데이터를 보여주고 수정할 수 있는 페이지를 제공해야 합니다.
def page_update(...):
    object = <수정 할 Page 데이터를 조회>
    if <request가 POST 방식이라면>:
        # POST 로직
    else:
        form = PageForm(instance=<조회한 데이터>)
입력 할 수 있도록 PageForm을 생성하는데 이때 비어 있는 폼이 아닌 조회한 데이터로 채워진 폼을 제공합니다. instance 파라미터를 사용하세요.
return
def page_update(...):
    object = <수정 할 Page 데이터를 조회>
    if <request가 POST 방식이라면>:
        # POST 로직
    else:
        # GET 로직
    return render(...)
page_form 템플릿을 랜더해서 결과로 돌려주도록 작성해 주세요. 이때 위에서 생성한 form을 함께 템플릿으로 전달해야 합니다.
개발 서버를 켜고 상세 일기 보기 페이지로 가서 정상적으로 수정이 되는지 확인해 주세요.

**
지우고 싶은 하루를 보냈나요
아래를 참고해서 일기 상세 보기 페이지의 '삭제하기' 기능을 구현해 주세요. 삭제하기를 눌렀을 경우 정말 삭제할 것 인지를 묻는 페이지가 나오고 확인을 누르면 삭제되는 로직입니다.
urls.py로 가서 삭제하기에 해당하는 url 패턴의 주석을 해제해 주세요.
page_detail 템플릿으로 가서 삭제하기로 가는 링크를 url 템플릿 태그를 이용해서 작성해 주세요.
아래를 참고해서 page_delete 뷰를 작성해 주세요.
먼저 삭제할 글을 데이터 베이스로 부터 조회해 주세요.
POST
POST는 유저가 "삭제하시겠습니까?" 라는 질문에 "예"를 눌러서 폼을 제출했을 때 입니다.
만약 요청이 POST 방식이라면 조회한 데이터를 지우고 'page-list' 즉 일기 목록 보기 페이지로 redirect 되도록 작성해 주세요.
def page_delete(...):
    object = <삭제 대상 일기를 조회하는 로직>
    if <요청 방식이 POST라면>:
        <object를 이용해서 삭제 처리>
        return redirect(<일기 목록 보기 페이지로 연결>)
GET
GET은 유저가 처음 일기 삭제 페이지를 들어왔을 때이므로 삭제할 것인지를 다시 한번 묻는 page_confirm_delete.html을 랜더 해서 결과로 돌려주도록 작성합니다.
이때 삭제할 일기를 함께 템플릿으로 전달해 템플릿에서 해당 데이터를 사용할 수 있도록 작성해 주세요.
def page_delete(...):
    object = <삭제 대상 일기를 조회하는 로직>
    if <요청 방식이 POST라면>:
        # POST에 해당하는 로직
    else:
        return render(<page_confirm_delete 템플릿을 랜더>)
page_confirm_delete 템플릿으로 가서 작성해 주세요.
개발 서버를 켜고 정상적으로 삭제 처리가 되는지 확인해 주세요.

**
감정 일기 커버 설정하기
아래를 참고해서 감정 일기의 홈 화면이 나오도록 설정해 주세요.
diary 앱의 urls.py로 가서 urlpatterns 리스트의 맨 처음에 ''(빈 문자열)과 매칭이 되면 index뷰를 연결하도록 작성해 주세요. 이 url 패턴의 이름은 index 입니다.
views.py로 가서 index 뷰를 작성해 주세요. index뷰는 요청이 들어오면 index.html을 랜더해서 결과로 돌려줍니다.
index.html로 가서 작성해 주세요.
개발 서버를 켜고 /diary 없이 도메인으로 바로 접속해서 메인 페이지가 잘 나오는지 확인합니다. 'click to enter'를 눌러서 일기 목록 보기로 이동하는지 확인합니다.

**
새로 산 일기장
page_list 템플릿 아래쪽에 글이 없을 때 보여줄 HTML이 있습니다.
뷰에서 넘겨준 object_list에 데이터가 있다면 현재 content 블럭 안에 있는 내용이 나오도록 하고, 만약 object_list에 데이터가 없다면 페이지 아래 있는 HTML이 나오도록 작성해 주세요.
{% if <조건> %}
{% else %}
{% endif %} 를 사용해서 작성하세요.
일기 쓰기 페이지로 이동하는 url을 url 템플릿 태그를 이용해서 작성해 주세요.
개발 서버를 켜고 데이터를 모두 지운 후 잘 표시 되는지 확인해 주세요.

**
감정이 뒤죽박죽
우리가 만든 감정 일기가 잘 동작 하는지 테스트 해보고 싶습니다. 'django-seed'를 사용하여 50개의 무작위 데이터를 생성하고 각 데이터 중 유효성 검증에 맞지 않는 데이터를 수정해 주세요.
pip를 이용해서 'django-seed'를 설치해 주세요.
pip install django-seed
settings.py의 app 목록에 'django_seed'를 추가해 주세요.
터미널을 열고 30개의 무작위 데이터를 생성해 주세요.
개발 서버를 켜고 데이터를 확인해 주세요.
이 중에서 '감정 점수'를 보면 정수형 이긴 하지만 값의 범위가 매우 넓습니다. 이 부분을 아래를 참고해서 0 부터 10 사이의 무작위 정수로 수정해 주세요.
diary 앱의 validate_data.py에 page 데이터를 수정하는 'validate_pages' 함수를 작성해 주세요.
validate_pages 함수는 파라미터가 없는 형태 입니다.
pages라는 변수에 데이터 베이스에서 모든 Page 데이터를 가져와 주세요.
모든 pages 데이터를 돌면서 page의 score가 0 미만 이거나 10을 초과 한다면 아래를 참고해서 0부터 10사이의 무작위 정수로 값을 바꾼 후 데이터 베이스에 저장하는 로직을 작성해 주세요.
import random
value = random.randint(a,b)
randint 함수는 매개변수로 넘어온 a와 b사이의 무작위 정수를 반환합니다.
이때 반환하는 범위는 a와 b를 모두 포함한 폐구간(closed interval)입니다. (a<=X<=b)
터미널을 열고 django shell을 실행 한 뒤 아래를 참고해서 방금 작성한 validate_pages 함수를 실행해 주세요.

 ```python
 from diary.validate_data import validate_pages
 ```
개발 서버를 켜고 정상 적으로 감정 점수가 수정 되었는지 확인해 주세요.

**
감정이 뒤죽박죽
우리가 만든 감정 일기가 잘 동작 하는지 테스트 해보고 싶습니다. 'django-seed'를 사용하여 50개의 무작위 데이터를 생성하고 각 데이터 중 유효성 검증에 맞지 않는 데이터를 수정해 주세요.
pip를 이용해서 'django-seed'를 설치해 주세요.
-> pip install django-seed
settings.py의 app 목록에 'django_seed'를 추가해 주세요.
터미널을 열고 30개의 무작위 데이터를 생성해 주세요.
개발 서버를 켜고 데이터를 확인해 주세요.
이 중에서 '감정 점수'를 보면 정수형 이긴 하지만 값의 범위가 매우 넓습니다. 이 부분을 아래를 참고해서 0 부터 10 사이의 무작위 정수로 수정해 주세요.
diary 앱의 validate_data.py에 page 데이터를 수정하는 'validate_pages' 함수를 작성해 주세요.
validate_pages 함수는 파라미터가 없는 형태 입니다.
pages라는 변수에 데이터 베이스에서 모든 Page 데이터를 가져와 주세요.
모든 pages 데이터를 돌면서 page의 score가 0 미만 이거나 10을 초과 한다면 아래를 참고해서 0부터 10사이의 무작위 정수로 값을 바꾼 후 데이터 베이스에 저장하는 로직을 작성해 주세요.
import random
value = random.randint(a,b)
randint 함수는 매개변수로 넘어온 a와 b사이의 무작위 정수를 반환합니다.
이때 반환하는 범위는 a와 b를 모두 포함한 폐구간(closed interval)입니다. (a<=X<=b)
터미널을 열고 django shell을 실행 한 뒤 아래를 참고해서 방금 작성한 validate_pages 함수를 실행해 주세요.
 ```python
 from diary.validate_data import validate_pages
 ```
개발 서버를 켜고 정상 적으로 감정 점수가 수정 되었는지 확인해 주세요.

**





















